; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --debug -c -S -o.\mk60d10\flash\main.s --depend=.\mk60d10\flash\main.d --cpu=Cortex-M4 --apcs=interwork -O0 -I..\..\..\..\Libraries\startup\CoreSupport -I..\..\..\..\Libraries\startup\DeviceSupport -I..\..\..\..\Libraries\drivers\K\inc -I..\..\..\..\Libraries\utilities\inc -I..\..\..\..\Libraries\devices\inc -I..\src -I..\..\..\..\Libraries\znfat -I..\..\..\..\Libraries\emWin\Include -I..\..\..\..\Libraries\emWin\Sample\LCD_X -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_K60_DFP\1.2.0\Device\Include -DMK60DN512xxx10 -DMK60D10 -DRAVEN -DDEBUG --omf_browse=.\mk60d10\flash\main.crf ..\src\main.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

        REQUIRE _printf_pre_padding
        REQUIRE _printf_percent
        REQUIRE _printf_flags
        REQUIRE _printf_widthprec
        REQUIRE _printf_x
        REQUIRE _printf_longlong_hex
main PROC
        BL       DelayInit
        MOVS     r2,#4
        MOVS     r1,#6
        MOV      r0,r2
        BL       GPIO_QuickInit
        MOV      r1,#0x1c200
        MOV      r0,#0x8cd8
        BL       UART_QuickInit
        ADR      r0,|L0.192|
        BL       __2printf
        LDR      r0,|L0.220|
        LDR      r0,[r0,#0x38]
        BIC      r0,r0,#0x200
        LDR      r1,|L0.220|
        STR      r0,[r1,#0x38]
        LDR      r0,|L0.224|
        BL       __2printf
        MOVS     r0,#0
        LDR      r1,|L0.228|
        STR      r0,[r1,#0]
        B        |L0.74|
|L0.58|
        MOVS     r1,#6
        MOVS     r0,#4
        BL       GPIO_ToggleBit
        MOV      r0,#0x1f4
        BL       DelayMs
|L0.74|
        B        |L0.58|
        ENDP

rt_hw_hard_fault_exception PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        ADR      r0,|L0.232|
        LDR      r1,[r4,#0x1c]
        BL       __2printf
        ADR      r0,|L0.248|
        LDR      r1,[r4,#0x18]
        BL       __2printf
        ADR      r0,|L0.264|
        LDR      r1,[r4,#0x14]
        BL       __2printf
        ADR      r0,|L0.280|
        LDR      r1,[r4,#0x10]
        BL       __2printf
        ADR      r0,|L0.296|
        LDR      r1,[r4,#0xc]
        BL       __2printf
        ADR      r0,|L0.312|
        LDR      r1,[r4,#8]
        BL       __2printf
        ADR      r0,|L0.328|
        LDR      r1,[r4,#4]
        BL       __2printf
        ADR      r0,|L0.344|
        LDR      r1,[r4,#0]
        BL       __2printf
        POP      {r4,pc}
        ENDP

HardFault_Handler PROC
        ADR      r0,|L0.360|
        BL       __2printf
        NOP      
        MRS      r0,PSP
        MOV      r4,r0
        BL       rt_hw_hard_fault_exception
        NOP      
|L0.166|
        B        |L0.166|
        ENDP

BusFault_Handler PROC
        ADR      r0,|L0.396|
        BL       __2printf
        NOP      
        MRS      r0,PSP
        MOV      r4,r0
        BL       rt_hw_hard_fault_exception
        NOP      
|L0.188|
        B        |L0.188|
        ENDP

        DCW      0x0000
|L0.192|
        DCB      "Hardfault Interrupt test!\r\n",0
|L0.220|
        DCD      0x40048000
|L0.224|
        DCD      ||.conststring||
|L0.228|
        DCD      0x40049000
|L0.232|
        DCB      "psr: 0x%08x\r\n",0
        DCB      0
        DCB      0
|L0.248|
        DCB      " pc: 0x%08x\r\n",0
        DCB      0
        DCB      0
|L0.264|
        DCB      " lr: 0x%08x\r\n",0
        DCB      0
        DCB      0
|L0.280|
        DCB      "r12: 0x%08x\r\n",0
        DCB      0
        DCB      0
|L0.296|
        DCB      "r03: 0x%08x\r\n",0
        DCB      0
        DCB      0
|L0.312|
        DCB      "r02: 0x%08x\r\n",0
        DCB      0
        DCB      0
|L0.328|
        DCB      "r01: 0x%08x\r\n",0
        DCB      0
        DCB      0
|L0.344|
        DCB      "r00: 0x%08x\r\n",0
        DCB      0
        DCB      0
|L0.360|
        DCB      "\r\n HardFault_Handler interrupt!\r\n",0
        DCB      0
        DCB      0
|L0.396|
        DCB      "\r\n BusFault_Handler interrupt!\r\n",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

        DCB      "operate PORTA without open it's clock gate, that will t"
        DCB      "rigger hardfault!\r\n",0

;*** Start embedded assembler ***

#line 1 "..\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\startup\\CoreSupport\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 144
|__asm___6_main_c_main____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

__ARM_use_no_argv EQU 0

        EXPORT __ARM_use_no_argv
        EXPORT main [CODE]
        EXPORT rt_hw_hard_fault_exception [CODE]
        EXPORT HardFault_Handler [CODE]
        EXPORT BusFault_Handler [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT DelayInit [CODE]
        IMPORT GPIO_QuickInit [CODE]
        IMPORT UART_QuickInit [CODE]
        IMPORT __2printf [CODE]
        IMPORT GPIO_ToggleBit [CODE]
        IMPORT DelayMs [CODE]
        IMPORT _printf_pre_padding [CODE]
        IMPORT _printf_percent [CODE]
        IMPORT _printf_flags [CODE]
        IMPORT _printf_widthprec [CODE]
        IMPORT _printf_x [CODE]
        IMPORT _printf_longlong_hex [CODE]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
